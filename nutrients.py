import streamlit as st
import pandas as pd

# рЃАрЃљрЃЎрЃЋрЃћрЃЉрЃў рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃўрЃА рЃЏрЃЮрЃюрЃљрЃфрЃћрЃЏрЃћрЃЉрЃў
products_data = {
    'рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃў': [
        'рЃдрЃЋрЃўрЃюрЃўрЃА рЃдрЃўрЃљ рЃ«рЃЮрЃарЃфрЃў', 'рЃдрЃЮрЃарЃўрЃА рЃдрЃЋрЃўрЃФрЃџрЃў', 'рЃЏрЃАрЃ«рЃЋрЃўрЃџрЃцрЃћрЃ«рЃљ рЃарЃЦрЃЮрЃАрЃљрЃюрЃў', 'рЃЦрЃљрЃЌрЃЏрЃўрЃА рЃдрЃЋрЃўрЃФрЃџрЃў',
        'рЃАрЃљрЃџрЃЏрЃЮрЃюрЃў', 'рЃбрЃБрЃюрЃљ', 'рЃАрЃљрЃарЃЊрЃўрЃюрЃў', 'рЃЎрЃарЃћрЃЋрЃћрЃбрЃћрЃЉрЃў', 'рЃЏрЃўрЃЊрЃўрЃћрЃЉрЃў',
        'рЃўрЃАрЃърЃљрЃюрЃљрЃ«рЃў', 'рЃЉрЃарЃЮрЃЎрЃЮрЃџрЃў', 'рЃљрЃЋрЃЮрЃЎрЃљрЃЊрЃЮ', 'рЃАрЃбрЃљрЃцрЃўрЃџрЃЮ', 'рЃЉрЃљрЃюрЃљрЃюрЃў',
        'рЃЎрЃљрЃарЃљрЃЦрЃў', 'рЃарЃФрЃћ', 'рЃўрЃЮрЃњрЃБрЃарЃбрЃў', 'рЃДрЃЋрЃћрЃџрЃў', 'рЃЎрЃЋрЃћрЃарЃфрЃ«рЃў',
        'рЃџрЃЮрЃЉрЃўрЃЮ', 'рЃюрЃБрЃерЃў', 'рЃЌрЃЮрЃЋрЃџрЃў', 'рЃЎрЃБрЃюрЃЪрЃБрЃЌрЃў', 'рЃЏрЃќрЃћрЃАрЃБрЃЏрЃќрЃўрЃарЃўрЃА рЃЌрЃћрЃАрЃџрЃў',
        'рЃќрЃдрЃЋрЃўрЃА рЃЎрЃљрЃџрЃЏрЃљрЃ«рЃў', 'рЃАрЃърЃўрЃарЃБрЃџрЃўрЃюрЃљ', 'рЃЎрЃџрЃЮрЃарЃћрЃџрЃљ', 'рЃарЃБрЃ«рЃў рЃЉрЃарЃўрЃюрЃ»рЃў', 'рЃЎрЃЋрЃўрЃюрЃЮрЃљ',
        'рЃдрЃўрЃљ рЃЌрЃћрЃЋрЃќрЃў', 'рЃЏрЃљрЃЎрЃарЃћрЃџрЃў', 'рЃЎрЃљрЃерЃбрЃюрЃўрЃА рЃАрЃЮрЃЎрЃЮ', 'рЃгрЃўрЃЌрЃћрЃџрЃў рЃ«рЃЮрЃарЃфрЃў', 'рЃдрЃЮрЃарЃўрЃА рЃ«рЃЮрЃарЃфрЃў'
    ],
    'рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ': [
        'рЃ«рЃЮрЃарЃфрЃў', 'рЃдрЃЋрЃўрЃФрЃџрЃў', 'рЃдрЃўрЃљ рЃ«рЃЮрЃарЃфрЃў', 'рЃдрЃЋрЃўрЃФрЃџрЃў',
        'рЃЌрЃћрЃЋрЃќрЃў', 'рЃЌрЃћрЃЋрЃќрЃў', 'рЃЌрЃћрЃЋрЃќрЃў', 'рЃќрЃдрЃЋрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў', 'рЃќрЃдрЃЋрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў',
        'рЃЉрЃЮрЃАрЃбрЃюрЃћрЃБрЃџрЃў', 'рЃЉрЃЮрЃАрЃбрЃюрЃћрЃБрЃџрЃў', 'рЃ«рЃўрЃџрЃў', 'рЃ«рЃўрЃџрЃў', 'рЃ«рЃўрЃџрЃў',
        'рЃарЃФрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў', 'рЃарЃФрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў', 'рЃарЃФрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў', 'рЃарЃФрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў', 'рЃЎрЃЋрЃћрЃарЃфрЃ«рЃў',
        'рЃЉрЃБрЃарЃдрЃБрЃџрЃћрЃБрЃџрЃў', 'рЃЎрЃљрЃЎрЃљрЃџрЃў рЃЊрЃљ рЃЌрЃћрЃАрЃџрЃў', 'рЃЎрЃљрЃЎрЃљрЃџрЃў рЃЊрЃљ рЃЌрЃћрЃАрЃџрЃў', 'рЃЎрЃљрЃЎрЃљрЃџрЃў рЃЊрЃљ рЃЌрЃћрЃАрЃџрЃў', 'рЃЎрЃљрЃЎрЃљрЃџрЃў рЃЊрЃљ рЃЌрЃћрЃАрЃџрЃў',
        'рЃќрЃдрЃЋрЃўрЃА рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў', 'рЃАрЃБрЃърЃћрЃарЃцрЃБрЃЊрЃў', 'рЃАрЃБрЃърЃћрЃарЃцрЃБрЃЊрЃў', 'рЃЏрЃљрЃарЃфрЃЋрЃџрЃћрЃБрЃџрЃў', 'рЃЏрЃљрЃарЃфрЃЋрЃџрЃћрЃБрЃџрЃў',
        'рЃЌрЃћрЃЋрЃќрЃў', 'рЃЌрЃћрЃЋрЃќрЃў', 'рЃАрЃЮрЃЎрЃЮ', 'рЃ«рЃЮрЃарЃфрЃў', 'рЃ«рЃЮрЃарЃфрЃў'
    ],
    'рЃарЃЎрЃўрЃюрЃљ_рЃЏрЃњ': [
        3.3, 30.5, 2.6, 13.0,
        0.8, 1.3, 2.9, 1.8, 6.7,
        2.7, 0.7, 0.6, 0.1, 0.3,
        0.2, 0.03, 0.1, 0.4, 1.2,
        6.2, 2.9, 3.7, 14.6, 5.2,
        90.0, 28.5, 58.0, 0.8, 4.6,
        1.0, 1.6, 0.5, 2.9, 0.9
    ],
    'B12_рЃЏрЃЎрЃњ': [
        2.6, 83.1, 2.4, 16.6,
        4.9, 4.3, 8.9, 1.1, 24.0,
        0.0, 0.0, 0.0, 0.0, 0.0,
        0.2, 0.4, 0.5, 0.8, 0.6,
        0.0, 0.0, 0.0, 0.0, 0.0,
        1.5, 175.0, 65.0, 0.0, 0.0,
        5.4, 19.0, 0.0, 2.1, 0.7
    ],
    'рЃцрЃЮрЃџрЃљрЃбрЃў_рЃЏрЃЎрЃњ': [
        4, 290, 6, 588,
        26, 5, 10, 3, 76,
        194, 63, 81, 3, 20,
        3, 5, 7, 27, 47,
        394, 28, 57, 79, 227,
        180, 94, 23, 8, 184,
        12, 2, 17, 7, 3
    ],
    'C_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_рЃЏрЃњ': [
        0, 1, 0, 17,
        0, 0, 0, 2, 8,
        28, 89, 10, 4, 9,
        0, 0, 0, 0, 0,
        2, 1, 8, 0, 1,
        3, 10, 9, 0, 0,
        0, 0, 2, 0, 1
    ],
    'D_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_IU': [
        3, 15, 7, 44,
        360, 154, 164, 5, 76,
        0, 0, 0, 0, 0,
        142, 115, 5, 24, 82,
        0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
        388, 388, 375, 6, 53
    ],
    'рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў_рЃЏрЃњ': [
        12, 5, 18, 8,
        12, 4, 382, 70, 26,
        99, 47, 12, 6, 5,
        24, 113, 110, 721, 50,
        113, 37, 160, 975, 78,
        1170, 120, 74, 23, 47,
        20, 12, 3, 7, 5
    ],
    'рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў_рЃЏрЃњ': [
        20, 18, 20, 19,
        29, 64, 39, 39, 34,
        79, 21, 29, 5, 27,
        2, 10, 11, 28, 10,
        140, 158, 168, 351, 325,
        560, 195, 315, 143, 197,
        27, 97, 9, 17, 16
    ]
}

# DataFrame-рЃўрЃА рЃерЃћрЃЦрЃЏрЃюрЃљ
df = pd.DataFrame(products_data)

# рЃАрЃбрЃарЃўрЃЏрЃџрЃўрЃбрЃўрЃА рЃљрЃърЃџрЃўрЃЎрЃљрЃфрЃўрЃљ
def main():
    st.set_page_config(page_title="рЃАрЃљрЃЎрЃЋрЃћрЃЉрЃў рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃўрЃА рЃЋрЃўрЃбрЃљрЃЏрЃўрЃю-рЃЏрЃўрЃюрЃћрЃарЃљрЃџрЃБрЃарЃў рЃФрЃўрЃћрЃЉрЃљ", layout="wide")
    
    # session state-рЃўрЃА рЃўрЃюрЃўрЃфрЃўрЃљрЃџрЃўрЃќрЃљрЃфрЃўрЃљ
    if 'search_term' not in st.session_state:
        st.session_state.search_term = ''
    
    # CSS рЃАрЃбрЃљрЃўрЃџрЃў рЃЎрЃЮрЃЏрЃърЃљрЃЦрЃбрЃБрЃарЃў рЃЋрЃўрЃБрЃАрЃЌрЃЋрЃўрЃА
    st.markdown("""
    <style>
        .stApp {
            font-size: 14px;
        }
        .element-container {
            margin-bottom: 0.5rem !important;
        }
        .stMarkdown {
            margin-bottom: 0.5rem !important;
        }
        .nutrition-card {
            background-color: #f8f9fa;
            padding: 0.5rem;
            border-radius: 0.25rem;
            margin-bottom: 0.5rem;
            border-left: 3px solid #007bff;
        }
        .nutrition-value {
            font-weight: bold;
            color: #007bff;
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("­ЪЦЌ рЃАрЃљрЃЎрЃЋрЃћрЃЉрЃў рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃўрЃА рЃЋрЃўрЃбрЃљрЃЏрЃўрЃю-рЃЏрЃўрЃюрЃћрЃарЃљрЃџрЃБрЃарЃў рЃФрЃўрЃћрЃЉрЃљ")
    
    # рЃЊрЃдрЃўрЃБрЃарЃў рЃЊрЃЮрЃќрЃћрЃЉрЃўрЃА рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ рЃЏрЃЌрЃљрЃЋрЃљрЃа рЃюрЃљрЃгрЃўрЃџрЃерЃў
    st.markdown("**­ЪЊі рЃЊрЃдрЃўрЃБрЃарЃў рЃЊрЃЮрЃќрЃћрЃЉрЃў (рЃќрЃарЃЊрЃљрЃАрЃарЃБрЃџрЃў):**")
    daily_doses_display = {
        "­ЪћХ рЃарЃЎрЃўрЃюрЃљ": "18 рЃЏрЃњ (рЃЦрЃљрЃџрЃћрЃЉрЃў), 8 рЃЏрЃњ (рЃЏрЃљрЃЏрЃљрЃЎрЃљрЃфрЃћрЃЉрЃў)",
        "­Ъћи B12": "2.4 рЃЏрЃЎрЃњ",
        "­ЪЪб рЃцрЃЮрЃџрЃљрЃбрЃў": "400 рЃЏрЃЎрЃњ",
        "­ЪЪА C рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў": "90 рЃЏрЃњ (рЃЏрЃљрЃЏрЃљрЃЎрЃљрЃфрЃћрЃЉрЃў), 75 рЃЏрЃњ (рЃЦрЃљрЃџрЃћрЃЉрЃў)",
        "­ЪЪа D рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў": "600-800 IU",
        "Рџф рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў": "1000-1200 рЃЏрЃњ",
        "­ЪЪБ рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў": "400-420 рЃЏрЃњ (рЃЏрЃљрЃЏрЃљрЃЎрЃљрЃфрЃћрЃЉрЃў), 310-320 рЃЏрЃњ (рЃЦрЃљрЃџрЃћрЃЉрЃў)"
    }
    
    col1, col2 = st.columns(2)
    for i, (nutrient, dose) in enumerate(daily_doses_display.items()):
        if i % 2 == 0:
            col1.markdown(f"<small>{nutrient}: {dose}</small>", unsafe_allow_html=True)
        else:
            col2.markdown(f"<small>{nutrient}: {dose}</small>", unsafe_allow_html=True)
    
    st.markdown("---")
    
    # рЃЏрЃ«рЃљрЃарЃћрЃА рЃърЃљрЃюрЃћрЃџрЃў рЃцрЃўрЃџрЃбрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА
    with st.sidebar:
        st.header("­ЪћЇ рЃФрЃўрЃћрЃЉрЃљ рЃЊрЃљ рЃцрЃўрЃџрЃбрЃарЃў")
        
        # рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃўрЃА рЃцрЃўрЃџрЃбрЃарЃў
        categories = ['рЃДрЃЋрЃћрЃџрЃљ'] + sorted(df['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'].unique().tolist())
        selected_category = st.selectbox("рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ:", categories)
        
        # рЃАрЃљрЃФрЃўрЃћрЃЉрЃЮ рЃЋрЃћрЃџрЃў
        search_term = st.text_input("рЃЏрЃЮрЃФрЃћрЃЉрЃюрЃћ рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў/рЃЏрЃўрЃюрЃћрЃарЃљрЃџрЃў:", 
                                   value=st.session_state.get('search_term', ''),
                                   placeholder="рЃЏрЃљрЃњ: рЃарЃЎрЃўрЃюрЃљ, B12, рЃцрЃЮрЃџрЃљрЃбрЃў")
        
        # рЃЏрЃўрЃюрЃўрЃЏрЃљрЃџрЃБрЃарЃў рЃарЃљрЃЮрЃЊрЃћрЃюрЃЮрЃЉрЃўрЃА рЃцрЃўрЃџрЃбрЃарЃў
        if search_term:
            min_amount = st.number_input(f"рЃЏрЃўрЃюрЃўрЃЏрЃљрЃџрЃБрЃарЃў рЃарЃљрЃЮрЃЊрЃћрЃюрЃЮрЃЉрЃљ:", 
                                       min_value=0.0, value=0.0, step=0.1)
        
        st.markdown("---")
        st.markdown("**рЃФрЃўрЃћрЃЉрЃўрЃА рЃЏрЃљрЃњрЃљрЃџрЃўрЃЌрЃћрЃЉрЃў:**")
        
        # рЃЊрЃљрЃЎрЃџрЃўрЃЎрЃћрЃЉрЃљрЃЊрЃў рЃдрЃўрЃџрЃљрЃЎрЃћрЃЉрЃў рЃФрЃўрЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА
        nutrients = ["рЃарЃЎрЃўрЃюрЃљ", "B12", "рЃцрЃЮрЃџрЃљрЃбрЃў", "C рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў", "D рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў", "рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў", "рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў"]
        
        for nutrient in nutrients:
            if st.button(f"­ЪћЇ {nutrient}", key=f"search_{nutrient}", use_container_width=True):
                st.session_state.search_term = nutrient
        # рЃњрЃљрЃАрЃБрЃцрЃЌрЃљрЃЋрЃћрЃЉрЃўрЃА рЃдрЃўрЃџрЃљрЃЎрЃў
        if st.button("­ЪЌЉ№ИЈ рЃФрЃўрЃћрЃЉрЃўрЃА рЃњрЃљрЃАрЃБрЃцрЃЌрЃљрЃЋрЃћрЃЉрЃљ", use_container_width=True):
            st.session_state.search_term = ''
            st.rerun()
    
    # рЃЏрЃЌрЃљрЃЋрЃљрЃарЃў рЃЎрЃЮрЃюрЃбрЃћрЃюрЃбрЃў
    filtered_df = df.copy()
    
    # рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃўрЃА рЃцрЃўрЃџрЃбрЃарЃў
    if selected_category != 'рЃДрЃЋрЃћрЃџрЃљ':
        filtered_df = filtered_df[filtered_df['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'] == selected_category]
    
    # рЃФрЃўрЃћрЃЉрЃўрЃА рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ
    if search_term:
        search_results = search_by_nutrient(filtered_df, search_term, 
                                          min_amount if 'min_amount' in locals() else 0)
        
        if not search_results.empty:
            st.subheader(f"­Ъј» рЃФрЃўрЃћрЃЉрЃўрЃА рЃерЃћрЃЊрЃћрЃњрЃћрЃЉрЃў: '{search_term}' (рЃерЃћрЃЏрЃфрЃЋрЃћрЃџрЃЮрЃЉрЃљ рЃЏрЃЮрЃфрЃћрЃЏрЃБрЃџрЃўрЃљ 100рЃњрЃа-рЃќрЃћ)")
            
            # рЃЊрЃдрЃўрЃБрЃарЃў рЃЊрЃЮрЃќрЃўрЃА рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ
            daily_dose = get_daily_dose(search_term)
            if daily_dose:
                st.info(f"­ЪЊі **рЃЊрЃдрЃўрЃБрЃарЃў рЃарЃћрЃЎрЃЮрЃЏрЃћрЃюрЃЊрЃћрЃЉрЃБрЃџрЃў рЃЊрЃЮрЃќрЃљ:** {daily_dose}")
            
            # рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃћрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ рЃ»рЃњрЃБрЃцрЃўрЃарЃћрЃЉрЃљ
            categories_found = search_results['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'].unique()
            
            for category in sorted(categories_found):
                with st.expander(f"­ЪЊѓ {category}", expanded=True):
                    category_data = search_results[search_results['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'] == category]
                    
                    # рЃДрЃЋрЃћрЃџрЃљрЃќрЃћ рЃЏрЃЊрЃўрЃЊрЃљрЃарЃў рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃўрЃА рЃЕрЃЋрЃћрЃюрЃћрЃЉрЃљ
                    nutrient_col = find_nutrient_column(search_term)
                    if nutrient_col:
                        category_data = category_data.sort_values(nutrient_col, ascending=False)
                        
                        for _, row in category_data.iterrows():
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.write(f"**{row['рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃў']}**")
                            with col2:
                                value = row[nutrient_col]
                                unit = get_unit(nutrient_col)
                                if value > 0:
                                    st.write(f"`{value} {unit}`")
                                else:
                                    st.write("`0`")
        else:
            st.warning(f"рЃљрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў '{search_term}'-рЃўрЃЌ")
    
    else:
        # рЃДрЃЋрЃћрЃџрЃљ рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃўрЃА рЃЕрЃЋрЃћрЃюрЃћрЃЉрЃљ рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃћрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ
        st.subheader("­ЪЊІ рЃДрЃЋрЃћрЃџрЃљ рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃў рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃћрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ (рЃерЃћрЃЏрЃфрЃЋрЃћрЃџрЃЮрЃЉрЃљ рЃЏрЃЮрЃфрЃћрЃЏрЃБрЃџрЃўрЃљ 100рЃњрЃа-рЃќрЃћ)")
        
        categories_to_show = filtered_df['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'].unique()
        
        for category in sorted(categories_to_show):
            with st.expander(f"­ЪЊѓ {category}", expanded=False):
                category_data = filtered_df[filtered_df['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'] == category]
                
                # рЃњрЃарЃўрЃЊрЃўрЃА рЃцрЃЮрЃарЃЏрЃљрЃбрЃерЃў рЃЕрЃЋрЃћрЃюрЃћрЃЉрЃљ
                cols = st.columns(2)  # 2 рЃАрЃЋрЃћрЃбрЃўрЃљрЃюрЃў рЃњрЃарЃўрЃЊрЃў
                
                for idx, (_, row) in enumerate(category_data.iterrows()):
                    with cols[idx % 2]:
                        # рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃўрЃА рЃЉрЃљрЃарЃљрЃЌрЃў рЃДрЃЋрЃћрЃџрЃљ рЃЋрЃўрЃбрЃљрЃЏрЃўрЃю-рЃЏрЃўрЃюрЃћрЃарЃљрЃџрЃўрЃЌ
                        nutrition_info = f"""
                        <div class="nutrition-card">
                            <h4 style="margin: 0 0 0.5rem 0; color: #333;">{row['рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃў']}</h4>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.25rem; font-size: 12px;">
                                <div>­ЪћХ рЃарЃЎрЃўрЃюрЃљ: <span class="nutrition-value">{row['рЃарЃЎрЃўрЃюрЃљ_рЃЏрЃњ']} рЃЏрЃњ</span></div>
                                <div>­Ъћи B12: <span class="nutrition-value">{row['B12_рЃЏрЃЎрЃњ']} рЃЏрЃЎрЃњ</span></div>
                                <div>­ЪЪб рЃцрЃЮрЃџрЃљрЃбрЃў: <span class="nutrition-value">{row['рЃцрЃЮрЃџрЃљрЃбрЃў_рЃЏрЃЎрЃњ']} рЃЏрЃЎрЃњ</span></div>
                                <div>­ЪЪА C рЃЋрЃўрЃб.: <span class="nutrition-value">{row['C_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_рЃЏрЃњ']} рЃЏрЃњ</span></div>
                                <div>­ЪЪа D рЃЋрЃўрЃб.: <span class="nutrition-value">{row['D_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_IU']} IU</span></div>
                                <div>Рџф рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў: <span class="nutrition-value">{row['рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў_рЃЏрЃњ']} рЃЏрЃњ</span></div>
                                <div>­ЪЪБ рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў: <span class="nutrition-value">{row['рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў_рЃЏрЃњ']} рЃЏрЃњ</span></div>
                            </div>
                        </div>
                        """
                        st.markdown(nutrition_info, unsafe_allow_html=True)
    
    # рЃАрЃбрЃљрЃбрЃўрЃАрЃбрЃўрЃЎрЃљ
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("рЃАрЃБрЃџ рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃў", len(filtered_df))
    
    with col2:
        st.metric("рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃћрЃЉрЃў", len(filtered_df['рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљ'].unique()))
    
    with col3:
        if search_term and 'search_results' in locals():
            st.metric("рЃФрЃўрЃћрЃЉрЃўрЃА рЃерЃћрЃЊрЃћрЃњрЃћрЃЉрЃў", len(search_results))

def find_nutrient_column(search_term):
    """рЃЋрЃърЃЮрЃБрЃџрЃЮрЃЉрЃЌ рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃАрЃЋрЃћрЃбрЃА рЃФрЃўрЃћрЃЉрЃўрЃА рЃбрЃћрЃарЃЏрЃўрЃюрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ"""
    search_lower = search_term.lower()
    
    nutrient_mapping = {
        'рЃарЃЎрЃўрЃюрЃљ': 'рЃарЃЎрЃўрЃюрЃљ_рЃЏрЃњ',
        'iron': 'рЃарЃЎрЃўрЃюрЃљ_рЃЏрЃњ',
        'b12': 'B12_рЃЏрЃЎрЃњ',
        'рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў b12': 'B12_рЃЏрЃЎрЃњ',
        'рЃцрЃЮрЃџрЃљрЃбрЃў': 'рЃцрЃЮрЃџрЃљрЃбрЃў_рЃЏрЃЎрЃњ',
        'folate': 'рЃцрЃЮрЃџрЃљрЃбрЃў_рЃЏрЃЎрЃњ',
        'c': 'C_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_рЃЏрЃњ',
        'рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў c': 'C_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_рЃЏрЃњ',
        'vitamin c': 'C_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_рЃЏрЃњ',
        'd': 'D_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_IU',
        'рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў d': 'D_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_IU',
        'vitamin d': 'D_рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў_IU',
        'рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў': 'рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў_рЃЏрЃњ',
        'calcium': 'рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў_рЃЏрЃњ',
        'рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў': 'рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў_рЃЏрЃњ',
        'magnesium': 'рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў_рЃЏрЃњ'
    }
    
    return nutrient_mapping.get(search_lower)

def get_unit(column_name):
    """рЃЋрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃЌ рЃерЃћрЃАрЃљрЃЉрЃљрЃЏрЃўрЃА рЃќрЃЮрЃЏрЃўрЃА рЃћрЃарЃЌрЃћрЃБрЃџрЃА"""
    if 'рЃЏрЃњ' in column_name:
        return 'рЃЏрЃњ'
    elif 'рЃЏрЃЎрЃњ' in column_name:
        return 'рЃЏрЃЎрЃњ'
    elif 'IU' in column_name:
        return 'IU'
    return ''

def get_daily_dose(nutrient_name):
    """рЃЋрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃЌ рЃЊрЃдрЃўрЃБрЃа рЃЊрЃЮрЃќрЃљрЃА рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃў рЃюрЃБрЃбрЃарЃўрЃћрЃюрЃбрЃўрЃАрЃЌрЃЋрЃўрЃА"""
    daily_doses = {
        "рЃарЃЎрЃўрЃюрЃљ": "18 рЃЏрЃњ (рЃЦрЃљрЃџрЃћрЃЉрЃў), 8 рЃЏрЃњ (рЃЏрЃљрЃЏрЃљрЃЎрЃљрЃфрЃћрЃЉрЃў)",
        "b12": "2.4 рЃЏрЃЎрЃњ",
        "рЃцрЃЮрЃџрЃљрЃбрЃў": "400 рЃЏрЃЎрЃњ", 
        "c рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў": "90 рЃЏрЃњ (рЃЏрЃљрЃЏрЃљрЃЎрЃљрЃфрЃћрЃЉрЃў), 75 рЃЏрЃњ (рЃЦрЃљрЃџрЃћрЃЉрЃў)",
        "d рЃЋрЃўрЃбрЃљрЃЏрЃўрЃюрЃў": "600-800 IU",
        "рЃЎрЃљрЃџрЃфрЃўрЃБрЃЏрЃў": "1000-1200 рЃЏрЃњ",
        "рЃЏрЃљрЃњрЃюрЃўрЃБрЃЏрЃў": "400-420 рЃЏрЃњ (рЃЏрЃљрЃЏрЃљрЃЎрЃљрЃфрЃћрЃЉрЃў), 310-320 рЃЏрЃњ (рЃЦрЃљрЃџрЃћрЃЉрЃў)"
    }
    
    # рЃЋрЃћрЃФрЃћрЃЉрЃЌ рЃЊрЃЮрЃќрЃљрЃА
    for key, dose in daily_doses.items():
        if key.lower() in nutrient_name.lower():
            return dose
    return None

def search_by_nutrient(df, search_term, min_amount=0):
    """рЃЋрЃўрЃФрЃћрЃЉрЃЌ рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃА рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃў рЃюрЃБрЃбрЃарЃўрЃћрЃюрЃбрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ"""
    nutrient_col = find_nutrient_column(search_term)
    
    if not nutrient_col:
        return pd.DataFrame()
    
    # рЃЋрЃцрЃўрЃџрЃбрЃарЃљрЃЋрЃЌ рЃърЃарЃЮрЃЊрЃБрЃЦрЃбрЃћрЃЉрЃА, рЃарЃЮрЃЏрЃџрЃћрЃЉрЃўрЃф рЃерЃћрЃўрЃфрЃљрЃЋрЃћрЃю рЃљрЃЏ рЃюрЃБрЃбрЃарЃўрЃћрЃюрЃбрЃА рЃЏрЃўрЃюрЃўрЃЏрЃљрЃџрЃБрЃарЃў рЃарЃљрЃЮрЃЊрЃћрЃюрЃЮрЃЉрЃўрЃА рЃќрЃћрЃЏрЃЮрЃЌ
    results = df[df[nutrient_col] > min_amount].copy()
    
    # рЃЋрЃљрЃџрЃљрЃњрЃћрЃЉрЃЌ рЃЏрЃљрЃдрЃљрЃџрЃў рЃерЃћрЃЏрЃфрЃЋрЃћрЃџрЃЮрЃЉрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ
    results = results.sort_values(nutrient_col, ascending=False)
    
    return results

if __name__ == "__main__":
    main()